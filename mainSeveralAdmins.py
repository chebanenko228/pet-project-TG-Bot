import asyncio
import aiosqlite
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.bot import DefaultBotProperties

API_TOKEN = ""
ADMIN_IDS = []  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
GROUP_ID = -100  # ID –∫–∞–Ω–∞–ª–∞

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

DB_PATH = "group_access_EG.db"


# ------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î -------------------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤
        await db.execute("""
        CREATE TABLE IF NOT EXISTS access (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            expires_at TEXT,
            posts_today INTEGER DEFAULT 0,
            last_post_date TEXT
        )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        await db.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            requested_at TEXT,
            status TEXT,              -- pending / approved / denied
            FOREIGN KEY (user_id) REFERENCES access(user_id)
        )
        """)

        await db.commit()


# ------------------- –ö–û–ú–ê–ù–î–ê /start -------------------
@dp.message(CommandStart())
async def start_command(message: types.Message):
    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if message.sender_chat:
        return

    user_id = message.from_user.id
    username = message.from_user.username or f"id{user_id}"

    text = (
        f"–ü—Ä–∏–≤–µ—Ç, @{username}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø—É.\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ, "
        "–≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /request.\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –∏ –ª–∏–±–æ "
        "–æ–¥–æ–±—Ä–∏—Ç, –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç. –ö–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, "
        "—Ç—ã —Å–º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –¥–æ 3 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å."
    )

    await message.answer(text)


# ------------------- –ó–ê–ü–†–û–° –î–û–°–¢–£–ü–ê -------------------
@dp.message(Command("request"))
async def request_access(message: types.Message):
    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if message.sender_chat:
        return

    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /request:
    - –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.
    - –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å.
    - –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ < —á–∞—Å–∞ –Ω–∞–∑–∞–¥ ‚Üí —Å—Ç–æ–ø–∞–µ–º.
    - –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–∫–∏ ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞.
    """
    user_id = message.from_user.id
    username = message.from_user.username or f"id{user_id}"
    now = datetime.now(timezone.utc)

    if user_id in ADMIN_IDS:
        # –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        await message.answer("‚úÖ –¢—ã –∞–¥–º–∏–Ω, —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        cursor = await db.execute(
            "SELECT expires_at, posts_today, last_post_date FROM access WHERE user_id=?",
            (user_id,)
        )
        access_row = await cursor.fetchone()

        if access_row:
            expires_at, posts_today, last_post_date = access_row
            if expires_at:
                expires_dt = datetime.fromisoformat(expires_at)
                if expires_dt > now:
                    days_left = (expires_dt.date() - now.date()).days
                    used_posts = 0
                    if last_post_date and datetime.fromisoformat(last_post_date).date() == now.date():
                        used_posts = posts_today
                    await message.answer(
                        f"‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.\n"
                        f"–°–µ–≥–æ–¥–Ω—è {used_posts}/3 –ø–æ—Å—Ç–æ–≤."
                    )
                    return

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute(
            "SELECT requested_at, status FROM requests WHERE user_id=? ORDER BY id DESC LIMIT 1",
            (user_id,)
        )
        request_row = await cursor.fetchone()

        if request_row:
            requested_at, status = request_row
            if requested_at:
                last_request = datetime.fromisoformat(requested_at)
                delta = now - last_request
                if delta < timedelta(hours=1):
                    minutes_left = int((timedelta(hours=1) - delta).total_seconds() // 60)
                    await message.answer(
                        f"‚è≥ –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å. –ü–æ–¥–æ–∂–¥–∏ {minutes_left} –º–∏–Ω."
                    )
                    return

        # üîπ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        await db.execute(
            "INSERT INTO requests (user_id, username, requested_at, status) VALUES (?, ?, ?, ?)",
            (user_id, username, now.isoformat(), "pending")
        )
        await db.commit()

    # üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}_{username}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"deny_{user_id}_{username}")

    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{username} (ID {user_id})",
            reply_markup=kb.as_markup()
        )

    await message.answer("üì© –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")


# ------------------- –†–ï–®–ï–ù–ò–ï –ê–î–ú–ò–ù–ê -------------------
@dp.callback_query()
async def decision(callback: types.CallbackQuery):
    action, user_id_str, username = callback.data.split("_", 2)
    user_id = int(user_id_str)
    if username == "":
        username = f"id{user_id}"

    async with aiosqlite.connect(DB_PATH) as db:
        if action == "approve":
            expires = datetime.now(timezone.utc) + timedelta(days=7)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            await db.execute(
                "UPDATE requests SET status=? WHERE user_id=? AND status='pending'",
                ("approved", user_id)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            await db.execute(
                "REPLACE INTO access (user_id, username, expires_at, posts_today, last_post_date) VALUES (?, ?, ?, ?, ?)",
                (user_id, username, expires.isoformat(), 0, None)
            )
            await db.commit()

            await bot.send_message(
                user_id,
                "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ –Ω–∞ 7 –¥–Ω–µ–π (3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å)."
            )
            await callback.message.edit_text(f"–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ (ID {user_id}, @{username})")

        elif action == "deny":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            await db.execute(
                "UPDATE requests SET status=? WHERE user_id=? AND status='pending'",
                ("denied", user_id)
            )
            await db.commit()

            await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await callback.message.edit_text(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå (ID {user_id}, @{username})")

    await callback.answer()


# ------------------- –ö–û–ú–ê–ù–î–ê /list -------------------
@dp.message(Command("list"))
async def list_access(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT user_id, username, expires_at, posts_today FROM access"
        )
        rows = await cursor.fetchall()

    if not rows:
        await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, username, expires, posts in rows:
        expires_dt = datetime.fromisoformat(expires)
        expires_str = expires_dt.strftime("%d.%m.%Y %H:%M")
        text += f"ID {uid}, @{username or '–±–µ–∑ username'} ‚Äî –¥–æ {expires_str}, {posts}/3 –ø–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n"

    await message.answer(text)


# ------------------- –ö–û–ú–ê–ù–î–ê /revoke -------------------
@dp.message(Command("revoke"))
async def revoke_access(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return

    try:
        user_id_to_revoke = int(args[1])
    except ValueError:
        await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT username FROM access WHERE user_id=?", (user_id_to_revoke,))
        row = await cursor.fetchone()

        if not row:
            await message.answer(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id_to_revoke} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
            return

        username = row[0] or f"id{user_id_to_revoke}"
        # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç—É–ø
        await db.execute("DELETE FROM access WHERE user_id=?", (user_id_to_revoke,))
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(user_id_to_revoke, "‚õîÔ∏è –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –¥–æ—Å—Ä–æ—á–Ω–æ —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID {user_id_to_revoke}) –±—ã–ª —É–¥–∞–ª—ë–Ω.")


# ------------------- –°–ë–†–û–° –£ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø -------------------
@dp.message(Command("reset_user"))
async def reset_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_user <user_id>")
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE access SET posts_today = 0 WHERE user_id = ?", (user_id,))
        await db.commit()

        cursor = await db.execute("SELECT user_id, username FROM access WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()

    if row:
        await message.answer(f"‚úÖ –°—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row[1]} (ID: {row[0]}) —Å–±—Ä–æ—à–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


# ------------------- –°–ë–†–û–° –£ –í–°–ï–• -------------------
@dp.message(Command("reset_all"))
async def reset_all(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE access SET posts_today = 0")
        await db.commit()

    await message.answer("‚úÖ –°—á—ë—Ç—á–∏–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")


# ------------------- –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô -------------------
@dp.message()
async def group_message(message: types.Message):
    if message.chat.id != GROUP_ID:
        return

    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if message.sender_chat:
        return

    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        return  # –∞–¥–º–∏–Ω–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º

    username = message.from_user.username or f"id{user_id}"
    now = datetime.now(timezone.utc)

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT expires_at, posts_today, last_post_date FROM access WHERE user_id=?",
            (user_id,)
        )
        row = await cursor.fetchone()

        if not row:
            await message.delete()
            return

        expires_at, posts_today, last_post_date = row

        if expires_at and now > datetime.fromisoformat(expires_at):
            await db.execute("DELETE FROM access WHERE user_id=?", (user_id,))
            await db.commit()
            await message.delete()
            return

        today = now.date()
        if not last_post_date or datetime.fromisoformat(last_post_date).date() != today:
            posts_today = 0

        if posts_today >= 3:
            await message.delete()
        else:
            await db.execute(
                "UPDATE access SET posts_today=?, last_post_date=?, username=? WHERE user_id=?",
                (posts_today + 1, now.isoformat(), username, user_id)
            )
            await db.commit()


# ------------------- –°–ë–†–û–° –õ–ò–ú–ò–¢–û–í -------------------
async def reset_daily():
    while True:
        now = datetime.now()
        tomorrow = datetime.combine(now.date() + timedelta(days=1), datetime.min.time())
        seconds_until_midnight = (tomorrow - now).total_seconds()
        await asyncio.sleep(seconds_until_midnight)
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute("UPDATE access SET posts_today=0")
                await db.commit()
            print("‚úÖ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤: {e}")


# ------------------- –ü–†–û–í–ï–†–ö–ê –ò–°–¢–ï–ö–®–ò–• –î–û–°–¢–£–ü–û–í -------------------
async def check_expired():
    while True:
        now = datetime.now(timezone.utc)
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT user_id, username, expires_at FROM access WHERE expires_at IS NOT NULL")
            rows = await cursor.fetchall()
            for user_id, username, expires in rows:
                if expires and now > datetime.fromisoformat(expires):
                    await db.execute("DELETE FROM access WHERE user_id=?", (user_id,))
                    await db.commit()
                    await bot.send_message(user_id, "‚õî –°—Ä–æ–∫ –≤–∞—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫.")
                    for admin_id in ADMIN_IDS:
                        await bot.send_message(admin_id, f"‚õîÔ∏è –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username or user_id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏ –±—ã–ª —Å–Ω—è—Ç.")
        await asyncio.sleep(60)


# ------------------- –ó–ê–ü–£–°–ö -------------------
async def main():
    await init_db()
    asyncio.create_task(reset_daily())
    asyncio.create_task(check_expired())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
