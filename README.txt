# Telegram Bot для Управления Доступом в Группу

Этот бот контролирует доступ пользователей к группе в Telegram.
Пользователи могут отправлять заявку на доступ командой `/request`, а администратор одобряет или отклоняет заявки. Бот ограничивает количество сообщений в день (по умолчанию 3) и автоматически отслеживает истечение доступа.

## Основные функции
- Автоматическое удаление сообщений пользователей без доступа.
- Ограничение количества сообщений в день (`max_posts`).
- Сброс дневных лимитов в полночь.
- Проверка истечения срока доступа и уведомление пользователя и администратора.
- Возможность продления доступа администраторами (`/extend`).
- Возможность изменения максимального количества постов для конкретного пользователя (`/setlimit`).

---


Установка и запуск:
Клонируйте репозиторий: git clone <URL_репозитория> cd <папка_репозитория>
Создайте виртуальное окружение (рекомендуется): python -m venv venv

Windows
venv\Scripts\activate

Linux / Mac
source venv/bin/activate

Установите зависимости: pip install -r requirements.txt
Создайте бота в Telegram через BotFather:
Откройте BotFather: https://t.me/BotFather
Отправьте /newbot и следуйте инструкциям.
Сохраните API токен для бота.

Настройте параметры в коде (config.py): API_TOKEN = "ВАШ_API_TOKEN" ADMIN_IDS = ВАШИ_ID_АДМИНИСТРАТОРОВ GROUP_ID = ВАШ_ID_ГРУППЫ DB_PATH = НАЗВАНИЕ ФАЙЛА БАЗЫ ДАННЫХ

Создайте группу в Telegram:
Добавьте бота в группу.
Сделайте бота администратором, чтобы он мог удалять сообщения пользователей без доступа.

Запуск бота: python bot.py Бот автоматически создаст базу данных и таблицы для заявок и доступа.

Рекомендации:
Для постоянной работы бота используйте VPS или сервисы вроде PythonAnywhere, Heroku или Docker.
Обновляйте список команд через BotFather, чтобы пользователи видели актуальные команды.
Структура проекта:
    TGBotEgor/
    ├─ handlers/                   # Хэндлеры команд
    │  ├─ admin.py
    │  ├─ group.py
    │  ├─ request.py
    │  └─ start.py
    ├─ services/                   # Сервисы и фоновые задачи
    │  └─ scheduler.py
    ├─ group_access.db             # База данных
    ├─ bot.py                      # Точка входа в бота
    ├─ config.py                   # Конфигурация бота (TOKEN, ADMIN_IDS и т.д.)
    ├─ database.py                 # Работа с БД
    ├─ requirements.txt            # Зависимости Python
    └─ README.md                   # Документация


==========================
       КОМАНДЫ БОТА
==========================

Пользовательские команды:

/start
    - Приветствие и объяснение работы бота.
    - Показывает инструкцию, как подать заявку на доступ к группе.

/request
    - Подать заявку на доступ к группе.
    - Ограничение: можно отправлять не чаще 1 раза в час.
    - Если доступ уже есть, бот покажет оставшийся срок и количество доступных постов на сегодня.

Админские команды:

/list
    - Показать список всех пользователей с активным доступом.
    - В списке: ID, username, срок действия доступа, количество постов за сегодня.

/revoke <user_id>
    - Досрочно отозвать доступ у конкретного пользователя по его ID.
    - Пользователь и администратор получают уведомление.

/reset_all
    - Сбросить дневной лимит постов (posts_today) у всех пользователей.

/reset_user <user_id>
    - Сбросить дневной лимит постов (posts_today) только у конкретного пользователя по его ID.

/setlimit <user_id> <limit>
    - Изменить максимальный лимит постов (max_posts) у конкретного пользователя.
    - Пользователь получает уведомление о новом лимите.

/extend <user_id> <days>
    - Продлить срок доступа конкретного пользователя на указанное количество дней.
    - Пользователь и администратор получают уведомление о новом сроке.

/help_admin
    - Показать список всех доступных админских команд и их описание.