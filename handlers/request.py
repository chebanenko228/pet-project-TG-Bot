from aiogram import types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiosqlite
from datetime import datetime, timedelta, timezone
from config import dp, bot, ADMIN_IDS, DB_PATH

# ------------------- –ó–ê–ü–†–û–° –î–û–°–¢–£–ü–ê -------------------
@dp.message(Command("request"))
async def request_access(message: types.Message):
    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if message.sender_chat:
        return

    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /request:
    - –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.
    - –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å.
    - –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ < —á–∞—Å–∞ –Ω–∞–∑–∞–¥ ‚Üí —Å—Ç–æ–ø–∞–µ–º.
    - –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–∫–∏ ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞.
    """
    user_id = message.from_user.id
    username = message.from_user.username or f"id{user_id}"
    now = datetime.now(timezone.utc)

    if user_id in ADMIN_IDS:
        # –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        await message.answer("‚úÖ –¢—ã –∞–¥–º–∏–Ω, —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        cursor = await db.execute(
            "SELECT expires_at, posts_today, last_post_date, max_posts FROM access WHERE user_id=?",
            (user_id,)
        )
        access_row = await cursor.fetchone()

        if access_row:
            expires_at, posts_today, last_post_date, max_posts = access_row
            if expires_at:
                expires_dt = datetime.fromisoformat(expires_at)
                if expires_dt > now:
                    days_left = (expires_dt.date() - now.date()).days
                    used_posts = 0
                    if last_post_date and datetime.fromisoformat(last_post_date).date() == now.date():
                        used_posts = posts_today
                    await message.answer(
                        f"‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.\n"
                        f"–°–µ–≥–æ–¥–Ω—è {used_posts}/{max_posts} –ø–æ—Å—Ç–æ–≤."
                    )
                    return

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute(
            "SELECT requested_at, status FROM requests WHERE user_id=? ORDER BY id DESC LIMIT 1",
            (user_id,)
        )
        request_row = await cursor.fetchone()

        if request_row:
            requested_at, status = request_row
            if requested_at:
                last_request = datetime.fromisoformat(requested_at)
                delta = now - last_request
                if delta < timedelta(hours=1):
                    minutes_left = int((timedelta(hours=1) - delta).total_seconds() // 60)
                    await message.answer(
                        f"‚è≥ –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å. –ü–æ–¥–æ–∂–¥–∏ {minutes_left} –º–∏–Ω."
                    )
                    return

        # üîπ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
        await db.execute(
            "INSERT INTO requests (user_id, username, requested_at, status) VALUES (?, ?, ?, ?)",
            (user_id, username, now.isoformat(), "pending")
        )
        await db.commit()

    # üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}_{username}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"deny_{user_id}_{username}")

    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{username} (ID {user_id})",
            reply_markup=kb.as_markup()
        )

    await message.answer("üì© –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")


# ------------------- –†–ï–®–ï–ù–ò–ï –ê–î–ú–ò–ù–ê -------------------
@dp.callback_query()
async def decision(callback: types.CallbackQuery):
    action, user_id_str, username = callback.data.split("_", 2)
    user_id = int(user_id_str)
    if username == "":
        username = f"id{user_id}"

    async with aiosqlite.connect(DB_PATH) as db:
        if action == "approve":
            expires = datetime.now(timezone.utc) + timedelta(days=7)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            await db.execute(
                "UPDATE requests SET status=? WHERE user_id=? AND status='pending'",
                ("approved", user_id)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            await db.execute(
                "REPLACE INTO access (user_id, username, expires_at, posts_today, last_post_date, max_posts) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, username, expires.isoformat(), 0, None, 3)
            )
            await db.commit()

            await bot.send_message(
                user_id,
                "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –ø–∏—Å–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ –Ω–∞ 7 –¥–Ω–µ–π (3 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å)."
            )
            await callback.message.edit_text(f"–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ (ID {user_id}, @{username})")

        elif action == "deny":
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
            await db.execute(
                "UPDATE requests SET status=? WHERE user_id=? AND status='pending'",
                ("denied", user_id)
            )
            await db.commit()

            await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await callback.message.edit_text(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå (ID {user_id}, @{username})")

    await callback.answer()