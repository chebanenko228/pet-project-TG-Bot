from aiogram import types
import asyncio
import aiosqlite
from datetime import datetime, timezone
from config import dp, ADMIN_IDS, GROUP_ID, DB_PATH, BOT_START_TIME


ADMIN_CONTACT = "@hrd_timur"  # username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


# ------------------- –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô -------------------
@dp.message()
async def group_message(message: types.Message):
    if message.chat.id != GROUP_ID:
        return

    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    if message.date.replace(tzinfo=timezone.utc) < BOT_START_TIME:
        return

    # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if message.sender_chat:
        return

    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        return  # –∞–¥–º–∏–Ω–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º

    # username –∏–ª–∏ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    now = datetime.now(timezone.utc)

    async def warn_and_delete(reason: str):
        """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ 20 —Å–µ–∫—É–Ω–¥"""
        await message.delete()
        warn_msg = await message.answer(
            f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç {username} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.\n"
            f"{reason}\n\n"
            f"üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –º–æ–∂–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∞—Ö —Ä–µ–∫–ª–∞–º—ã.\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_CONTACT}"
        )
        await asyncio.sleep(12)
        try:
            await warn_msg.delete()
        except:
            pass  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é/–±–æ—Ç–æ–º

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT expires_at, posts_today, last_post_date, max_posts FROM access WHERE user_id=?",
            (user_id,)
        )
        row = await cursor.fetchone()

        if not row:
            await warn_and_delete("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
            return

        expires_at, posts_today, last_post_date, max_posts = row

        today = now.date()
        if not last_post_date or datetime.fromisoformat(last_post_date).date() != today:
            posts_today = 0

        if posts_today >= max_posts:
            await warn_and_delete("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
        else:
            await db.execute(
                "UPDATE access SET posts_today=?, last_post_date=?, username=? WHERE user_id=?",
                (posts_today + 1, now.isoformat(), username, user_id)
            )
            await db.commit()
