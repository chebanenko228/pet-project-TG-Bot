from aiogram import types
from aiogram.filters import Command
import aiosqlite
from datetime import datetime, timedelta, timezone
from config import dp, bot, ADMIN_IDS, DB_PATH


# ------------------- –ö–û–ú–ê–ù–î–ê /list -------------------
@dp.message(Command("list"))
async def list_access(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT user_id, username, expires_at, posts_today, max_posts FROM access"
        )
        rows = await cursor.fetchall()

    if not rows:
        await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, username, expires, posts, max_posts in rows:
        expires_dt = datetime.fromisoformat(expires)
        expires_str = expires_dt.strftime("%d.%m.%Y %H:%M")
        text += f"ID {uid}, @{username or '–±–µ–∑ username'} ‚Äî –¥–æ {expires_str}, {posts}/{max_posts} –ø–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è\n"

    await message.answer(text)


# ------------------- –ö–û–ú–ê–ù–î–ê /revoke -------------------
@dp.message(Command("revoke"))
async def revoke_access(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke <user_id>")
        return

    try:
        user_id_to_revoke = int(args[1])
    except ValueError:
        await message.answer("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute("SELECT username FROM access WHERE user_id=?", (user_id_to_revoke,))
        row = await cursor.fetchone()

        if not row:
            await message.answer(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id_to_revoke} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
            return

        username = row[0] or f"id{user_id_to_revoke}"
        # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç—É–ø
        await db.execute("DELETE FROM access WHERE user_id=?", (user_id_to_revoke,))
        await db.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(user_id_to_revoke, "‚õîÔ∏è –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –¥–æ—Å—Ä–æ—á–Ω–æ —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID {user_id_to_revoke}) –±—ã–ª —É–¥–∞–ª—ë–Ω.")


# ------------------- –°–ë–†–û–° –£ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø -------------------
@dp.message(Command("reset_user"))
async def reset_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_user <user_id>")
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE access SET posts_today = 0 WHERE user_id = ?", (user_id,))
        await db.commit()

        cursor = await db.execute("SELECT user_id, username FROM access WHERE user_id = ?", (user_id,))
        row = await cursor.fetchone()

    if row:
        await message.answer(f"‚úÖ –°—á—ë—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row[1]} (ID: {row[0]}) —Å–±—Ä–æ—à–µ–Ω.")
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")


# ------------------- –°–ë–†–û–° –£ –í–°–ï–• -------------------
@dp.message(Command("reset_all"))
async def reset_all(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE access SET posts_today = 0")
        await db.commit()

    await message.answer("‚úÖ –°—á—ë—Ç—á–∏–∫–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.")


# ------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –∫ –∫—Ä–∞–π–Ω–µ–π –¥–∞—Ç–µ -------------------
@dp.message(Command("extend"))
async def extend_access(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /extend <user_id> <days>")
        return

    try:
        user_id = int(args[1])
        days = int(args[2])
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è user_id –∏ days –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT expires_at, username FROM access WHERE user_id=?", (user_id,))
        row = await cursor.fetchone()

        if not row:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        expires_at, username = row
        now = datetime.now(timezone.utc)
        if expires_at:
            expires_dt = datetime.fromisoformat(expires_at)
            if expires_dt < now:
                expires_dt = now
        else:
            expires_dt = now

        new_expires = expires_dt + timedelta(days=days)

        await db.execute("UPDATE access SET expires_at=? WHERE user_id=?", (new_expires.isoformat(), user_id))
        await db.commit()

    await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username or user_id} –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {new_expires.strftime('%d.%m.%Y %H:%M')}")
    await bot.send_message(user_id, f"‚è≥ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {new_expires.strftime('%d.%m.%Y %H:%M')}")


# ------------------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å -------------------
@dp.message(Command("setlimit"))
async def set_limit(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit <user_id> <limit>")
        return

    try:
        user_id = int(args[1])
        new_limit = int(args[2])
        if new_limit <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó user_id –∏ limit –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT username FROM access WHERE user_id=?", (user_id,))
        row = await cursor.fetchone()
        if not row:
            await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await db.execute("UPDATE access SET max_posts=? WHERE user_id=?", (new_limit, user_id))
        await db.commit()

    await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{row[0] or user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_limit}")
    await bot.send_message(user_id, f"üì¢ –í–∞—à –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –∏–∑–º–µ–Ω—ë–Ω: —Ç–µ–ø–µ—Ä—å {new_limit}.")


# ------------------- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ -------------------
@dp.message(Command("help_admin"))
async def help_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/list ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ª–∏–º–∏—Ç—ã\n"
        "/revoke <user_id> ‚Äî –õ–∏—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–∞\n"
        "/reset_user <user_id> ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/reset_all ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/extend <user_id> <days> ‚Äî –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π\n"
        "/setlimit <user_id> <limit> ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!"
    )

    await message.answer(help_text)